name: CICD pipeline with ECR and EC2
run-name: CICD pipeline with ECR and EC2

on:
  push:
    branches:
      - main

env:
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  MODEL_S3_URI: ${{ secrets.MODEL_S3_URI }}

jobs:
  deploy-to-ec2:
    name: Deploy Docker Container to EC2
    runs-on: ubuntu-latest

    steps:
      - name: Ensure Docker is Installed on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              echo "Docker not found. Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl enable docker
              sudo systemctl start docker
            else
              echo "Docker already installed."
            fi

      - name: Install AWS CLI on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            if ! command -v aws &> /dev/null; then
              echo "Installing AWS CLI..."
              sudo apt-get update
              sudo apt-get install -y unzip curl
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              aws --version
            else
              echo "AWS CLI already installed."
            fi

      - name: Configure AWS Credentials on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }}
            aws configure set region ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            echo "Logging into ECR..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            sudo docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Deploy Docker Container from ECR on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            CONTAINER_NAME=fastapi-app
            PORT=80

            echo "Stopping existing container (if running)..."
            sudo docker stop $CONTAINER_NAME || true
            sudo docker rm $CONTAINER_NAME || true

            echo "Removing old image (if exists)..."
            sudo docker rmi -f ${{ env.ECR_REPOSITORY_URI }} || true

            echo "Pulling latest image from ECR..."
            sudo docker pull ${{ env.ECR_REPOSITORY_URI }}:latest

            echo "Running new container..."
            sudo docker run -d --name $CONTAINER_NAME -p $PORT:8000 ${{ env.ECR_REPOSITORY_URI }}:latest
